generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                        String   @id @default(uuid())
  fullName                  String
  firstName                 String
  lastName                  String
  email                     String   @unique
  emailActivated            Boolean  @default(false)
  password                  String
  phone                     String?  @unique
  age                       Int?
  gender                    Gender?
  country                   String?
  city                      String?
  bodyMeasurementsId        Int?
  stylePreferencesId        Int?
  notificationPreferencesId Int?
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
  avatarUrl                 String?

  bodyMeasurements        BodyMeasurements?
  notificationPreferences NotificationPreferences?
  stylePreferences        StylePreferences?

  designerProfile       DesignerProfile?
  sessions              Sessions[]
  sentNotifications     Notification[]   @relation("notificationSender")
  receivedNotifications Notification[]   @relation("notificationReceiver")
  Reviews               Review[]
}

model BodyMeasurements {
  id            Int      @id @default(autoincrement())
  weight        Float?
  length        Float?
  shoulderWidth Float?
  neck          Float?
  chest         Float?
  arms          Float?
  forearms      Float?
  waist         Float?
  hips          Float?
  thigh         Float?
  belly         Float?
  aboveKnee     Float?
  belowKnee     Float?
  calf          Float?
  userId        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          Users    @relation(fields: [userId], references: [id])
}

model StylePreferences {
  id          Int      @id @default(autoincrement())
  preferences Json
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        Users    @relation(fields: [userId], references: [id])
}

model NotificationPreferences {
  id                           Int     @id @default(autoincrement())
  userId                       String  @unique
  textAppointmentNotifications Boolean @default(true)
  textOffersNotifications      Boolean @default(true)
  user                         Users   @relation(fields: [userId], references: [id])
}

model Otps {
  id        String   @id @default(uuid())
  email     String
  code      String   @unique
  expiredAt String   @unique
  createdAt DateTime @default(now())
}

model DesignerProfile {
  id  String @id @unique
  uid String @unique @default(uuid())

  address    String
  latitude   Decimal
  longtitude Decimal

  yearsExperience Int
  about           String
  workingDays     Json
  ordersFinished  Int

  reviews  Review[]
  services Service[]

  teamMembers TeamMember[]
  categories  Category[]   @relation("CategoryToDesigner")
  portfolios  Portfolio[]  @relation("PortfolioToDesigner")

  userAccount Users @relation(fields: [uid], references: [id])
}

model Service {
  id          String          @id @default(uuid())
  designerId  String
  title       String
  description String
  price       Int
  designer    DesignerProfile @relation(fields: [designerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model TeamMember {
  id         String          @id @default(uuid())
  designerId String
  name       String
  role       String
  avatarUrl  String?
  designer   DesignerProfile @relation(fields: [designerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Review {
  id         String @id @default(uuid())
  designerId String
  customerId String

  rating   Int
  comment  String
  postedOn DateTime

  user     Users           @relation(fields: [customerId], references: [id])
  designer DesignerProfile @relation(fields: [designerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Category {
  id        String            @id @default(uuid())
  name      String
  designers DesignerProfile[] @relation("CategoryToDesigner")
}

model Sessions {
  token      String   @id
  userId     String   @unique
  ExpiryDate DateTime
  user       Users    @relation(fields: [userId], references: [id])
}

enum Gender {
  Male
  Female
}

model Portfolio {
  id         String          @id @default(uuid())
  designerId String
  url        String
  designer   DesignerProfile @relation(fields: [designerId], references: [uid], name: "PortfolioToDesigner")
}

enum NotificationType {
  RescheduleRequest
  BookingConfirmed
  Ideas
}

enum NotificationSenderType {
  User
  System
}

model Notification {
  id         Int              @id @default(autoincrement())
  type       NotificationType
  read       Boolean          @default(false)
  details    Json?
  created_at DateTime         @default(now())

  senderType NotificationSenderType
  senderId   String?
  sender     Users?                 @relation(fields: [senderId], references: [id], name: "notificationSender")

  receiverId String
  receiver   Users  @relation(fields: [receiverId], references: [id], name: "notificationReceiver")
}
