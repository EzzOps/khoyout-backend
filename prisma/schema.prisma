// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  String              @id @default(uuid())
  fullName            String  
  firstName           String              
  lastName            String              
  email               String              @unique
  emailActivated      Boolean             @default(false)
  password            String
  phone               String?             @unique
  age                 Int?                
  gender              Gender?             
  country             String?             
  city                String?             
  bodyMeasurements    BodyMeasurements?
  stylePreferences    StylePreferences?
  notificationPreferences NotificationPreferences?
  bodyMeasurementsId  Int?
  stylePreferencesId  Int?
  notificationPreferencesId Int?
  avatarUrl           String?             // Added avatarUrl field
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

enum Gender {
  Male
  Female
}

model BodyMeasurements {
  id                  Int                 @id @default(autoincrement())
  weight              Float?
  length              Float?
  shoulderWidth       Float?
  neck                Float?
  chest               Float?
  arms                Float?
  forearms            Float?
  waist               Float?
  hips                Float?
  thigh               Float?
  belly               Float?
  aboveKnee           Float?
  belowKnee           Float?
  calf                Float?
  user                Users               @relation(fields: [userId], references: [id])
  userId              String              @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model StylePreferences {
  id                  Int                 @id @default(autoincrement())
  preferences         Json                
  user                Users               @relation(fields: [userId], references: [id])
  userId              String              @unique
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

model NotificationPreferences {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id])
  userId    String   @unique
  textAppointmentNotifications Boolean @default(true)
  textOffersNotifications Boolean @default(true)
}

model Otps {
  id                  String              @id @default(uuid())
  email               String
  code                String              @unique
  expiredAt           String              @unique
  createdAt           DateTime            @default(now())
}

model Designer {
  id                  Int                 @id @default(autoincrement())
  name                String
  location            String?
  gender              Gender?
  yearsExperience     Int
  address             String
  about               String
  workingDays         Json
  avatarUrl           String?
  ordersFinished      Int
  rating              Int                 // from 1 to 5 ---> this represent the number of stars
  ratingCount         Int?                // Added to count total ratings
  services            Service[]
  teamMembers         TeamMember[]
  reviews             Review[]
  categories          Category[]         
}

model Service {
  id                  Int                 @id @default(autoincrement())
  designerId          Int
  title               String
  description         String
  price               Int
  designer            Designer            @relation(fields: [designerId], references: [id])
}

model TeamMember {
  id                  Int                 @id @default(autoincrement())
  designerId          Int
  name                String
  role                String
  avatarUrl           String?
  designer            Designer            @relation(fields: [designerId], references: [id])
}

model Review {
  id                  Int                 @id @default(autoincrement())
  designerId          Int
  customerName        String
  rating              Int
  comment             String
  postedOn            DateTime
  designer            Designer            @relation(fields: [designerId], references: [id])
}

model Category {
  id                  Int                 @id @default(autoincrement())
  name                String
  designers           Designer[]          
}