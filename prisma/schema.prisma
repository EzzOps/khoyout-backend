generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                        String                   @id @default(uuid())
  fullName                  String
  firstName                 String
  lastName                  String
  email                     String                   @unique
  emailActivated            Boolean                  @default(false)
  password                  String
  phone                     String?                  @unique
  age                       Int?
  gender                    Gender?
  country                   String?
  city                      String?
  bodyMeasurementsId        Int?
  stylePreferencesId        Int?
  notificationPreferencesId Int?
  createdAt                 DateTime                 @default(now())
  updatedAt                 DateTime                 @updatedAt
  avatarUrl                 String?
  bodyMeasurements          BodyMeasurements?
  notificationPreferences   NotificationPreferences?
  stylePreferences          StylePreferences?
}

model BodyMeasurements {
  id            String       @id @default(uuid())
  weight        Float?
  length        Float?
  shoulderWidth Float?
  neck          Float?
  chest         Float?
  arms          Float?
  forearms      Float?
  waist         Float?
  hips          Float?
  thigh         Float?
  belly         Float?
  aboveKnee     Float?
  belowKnee     Float?
  calf          Float?
  userId        String   @unique
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          Users    @relation(fields: [userId], references: [id])
}

model StylePreferences {
  id          String      @id @default(uuid())
  preferences Json
  userId      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        Users    @relation(fields: [userId], references: [id])
}

model NotificationPreferences {
  id                           String     @id @default(uuid())
  userId                       String  @unique
  textAppointmentNotifications Boolean @default(true)
  textOffersNotifications      Boolean @default(true)
  user                         Users   @relation(fields: [userId], references: [id])
}

model Otps {
  id        String   @id @default(uuid())
  email     String
  code      String   @unique
  expiredAt String   @unique
  createdAt DateTime @default(now())
}

model Designer {
  id              String       @id @default(uuid())
  name            String
  location        String?
  gender          Gender?
  yearsExperience Int
  address         String
  about           String
  workingDays     Json
  avatarUrl       String?
  ordersFinished  Int
  rating          Int
  ratingCount     Int?
  reviews         Review[]     @relation("ReviewToDesigner")
  services        Service[]    @relation("ServiceToDesigner")
  teamMembers     TeamMember[] @relation("TeamMemeberToDesigner")
  categories      Category[]   @relation("CategoryToDesigner")
  designerId  String
  title       String
  description String
  price       Int
  designer    Designer @relation("ServiceToDesigner", fields: [designerId], references: [id])
}

model TeamMember {

  designerId   String
  customerName String
  rating       Int
  comment      String
  postedOn     DateTime
  designer     Designer @relation("ReviewToDesigner", fields: [designerId], references: [id])
}

model Category {
  id        String     @id @default(uuid())
  name      String
  designers Designer[] @relation("CategoryToDesigner")
}

model Portfolio {
  id         String   @id @default(uuid())
  designerId String
  designer   Designer @relation("PortfolioToDesigner", fields: [designerId], references: [id])
  url        String
}

enum Gender {
  Male
  Female
}

